/// <reference types="@types/node" />

import alchemy, { type Scope } from "alchemy";
import { CloudflareStateStore, SQLiteStateStore } from "alchemy/state";
import { Container, R2Bucket, BunSPA, Worker } from "alchemy/cloudflare";
import { MinecraftContainer } from "./src/container.ts";

const cloudflareStateStore = (scope: Scope) => new CloudflareStateStore(scope, {
  forceUpdate: process.env.ALCHEMY_CF_STATE_FORCE_UPDATE?.toLowerCase() === "true",
  stateToken: alchemy.secret(process.env.ALCHEMY_STATE_TOKEN ?? "minecraft-on-cloudflare-is-awesome-this-is-used-to-encrypt-state-stored-in-cloudflare-but-we-dont-have-any-sensitive-secrets-so-its-fine-to-use-this-token"),
  scriptName: "mineflare-alchemy-state-store",
});

const localStateStore = (scope: Scope) => new SQLiteStateStore(scope);

const app = await alchemy(process.env.WRANGLER_CI_OVERRIDE_NAME ?? "mineflare", {
  stateStore: process.env.NODE_ENV === "development" ? localStateStore : cloudflareStateStore,
  password: process.env.ALCHEMY_PASSWORD ?? "minecraft-on-cloudflare-is-awesome-this-is-used-to-encrypt-secrets-stored-locally-but-we-dont-have-any-so-its-fine-to-use-this-password",
});

export const container = await Container<MinecraftContainer>("container3", {
  name: `${app.name}-container`,
  className: "MinecraftContainer",
  adopt: true,
  build: {
    context: 'container_src',
    dockerfile: "Dockerfile",
  },
  instanceType: "standard-4"
});



// R2 bucket for Dynmap tiles and web UI
const dynmapBucket = await R2Bucket("dynmap-tiles", {
  name: `${app.name}-dynmap-public`,
  dev: {
    remote: true,
  },
  adopt: true,
  // Enable public access - tiles and UI served directly from R2.dev domain
  allowPublicAccess: true,
  // CORS config allows browser JS to fetch tiles and call Worker API
  cors: [
    {
      allowed: {
        origins: ["*"], // Permissive CORS for ease of use
        methods: ["GET", "HEAD"],
        headers: ["*"],
      },
    },
  ],
  lifecycle: [
    {
      id: "delete-after-1-day",
      enabled: true,
      conditions: {
          prefix: "tiles/world/",
      },
      deleteObjectsTransition: {
        condition: {
          maxAge: 60 * 60 * 24, // 24 hours because any less looks like "0 days" in the cloudflare UI
          type: "Age",
        }
      }
    },
    {
      id: "delete-mp-uploads",
      enabled: true,
      abortMultipartUploadsTransition: {
        condition: {
          maxAge: 60 * 60 * 24, // 24 hours because any less looks like "0 days" in the cloudflare UI
          type: "Age",
        }
      }
    }
  ]
});

// R2 bucket for Server game data
const dataBucket = await R2Bucket("data-private-bucket", {
  name: `${app.name}-private-data`,
  dev: {
    remote: true,
  },
  adopt: true,
  allowPublicAccess: false,
});

// Create API token for R2 access (S3-compatible credentials)
// This generates accessKeyId and secretAccessKey for Dynmap's S3 SDK
// const r2Token = await AccountApiToken("dynmap-r2-token", {
//   name: `${app.name}-dynmap-r2`,
//   policies: [
//     {
//       effect: "allow",
//       permissionGroups: ["Workers R2 Storage Write"],
//       resources: {
//         "com.cloudflare.api.account": "*",
//       },
//     },
//   ],
// });

export const dynmapWorker = await Worker("dynmap-worker", {
  name: `${app.name}-dynmap-public`,
  entrypoint: "src/dynmap-worker.ts",
  adopt: true,
  bindings: {
    DYNMAP_BUCKET: dynmapBucket,
    BUCKET_DOMAIN: dynmapBucket.domain ?? "",
    MINECRAFT_WORKER_URL: "https://*", // should be worker url but we don't know it yet
  },
});

export const worker = await BunSPA("mineflare-main-worker", {
  name: app.name,
  entrypoint: "src/worker.ts",
  frontend: "index.html",
  adopt: true,
  compatibility: "node",
  compatibilityFlags: ["enable_ctx_exports"],
  compatibilityDate: "2025-09-27",
  bindings: {
    MINECRAFT_CONTAINER: container,

    // Secrets for Tailscale
    TS_AUTHKEY: alchemy.secret(process.env.TS_AUTHKEY || "null"),
    NODE_ENV: process.env.NODE_ENV ?? 'development',

    // R2 API credentials (S3-compatible) generated by AccountApiToken
    // These are automatically encrypted by alchemy.secret()
    // R2_ACCESS_KEY_ID: r2Token.accessKeyId,
    // R2_SECRET_ACCESS_KEY: r2Token.secretAccessKey,

    // Bucket name (passed to container for Dynmap config)
    DYNMAP_BUCKET_NAME: dynmapBucket.name,
    DYNMAP_BUCKET: dynmapBucket,

    // Data bucket for server game data
    DATA_BUCKET_NAME: dataBucket.name,
    DATA_BUCKET: dataBucket,
    
    // Dynmap worker URL for iframe embedding
    DYNMAP_WORKER_URL: dynmapWorker.url ?? "",
  },
});


console.log("Worker URL:", worker.url);
console.log("Dynmap URL:", `https://${dynmapBucket.domain}`);
console.log("Dynmap Worker URL:", dynmapWorker.url);

await app.finalize();
